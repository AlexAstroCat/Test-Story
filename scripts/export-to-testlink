#!/usr/bin/env perl
use strict;
use warnings;
use lib qw( t/lib lib fixtures fixtures/Sophos-A8N/lib selenium/lib );
use Test::A8N;
use Getopt::Long;
use YAML::Syck;
use LWP::UserAgent;
use HTTP::Cookies;
use HTTP::Request::Common;

our $config = {};
my $home = $ENV{HOME};
if (-f "$home/.a8rc") {
    $config = LoadFile("$home/.a8rc");
}

our $verbose = 0;
our $help = 0;
our $quiet = 0;
our $fixture_base;
our $file_root;
our @tags = ();
GetOptions(
    'verbose'          => \$verbose,
    'quiet'            => \$quiet,
    'help'             => \$help,
    'r|file_root=s'    => \$file_root,
) or usage();
usage() if $help;

my $tl_user = "automated";
my $tl_pass = "vanc0uver";
my $ua = LWP::UserAgent->new;
$ua->cookie_jar(HTTP::Cookies->new(file => "lwpcookies.txt",
				   autosave => 1));
$ua->agent("Testlink importer");

my %opts = (
    fixture_base => '',
    file_root    => ($file_root || $config->{file_root} || "cases/testlink"),
    verbose      => $verbose,
);
$opts{filenames} = \@ARGV if @ARGV;

my $a8n = Test::A8N->new({
    %opts
});

my @files = @{$a8n->files};
for my $file (@files) {
    my $id = $file->testlink_id;
    my $filename = $file->filename;
    if ($id == -1) {
	say("Skipping $filename - missing TESTLINK_ID");
	next;
    }
    say("Processing $filename, TESTLINK_ID: $id");
    clear_old_testcases($id);
    my @testcases = @{$file->cases};
    my $xml = "<testcases>";
    for my $tc (@testcases) {
	my $name = $tc->name;
	my $summary = $tc->summary;
	my $preconditions = get_printable_version($tc->preconditions);
	my $steps = get_printable_version($tc->instructions);
	my $expected = get_printable_version($tc->expected);

	# merge the summary with the preconditions
	if ($preconditions) {
	    $summary .= "<br/><br/><strong>Preconditions</strong><br/>$preconditions<br/>";
	}
	$xml .= "<testcase name='$name'>";
	$xml .= "<summary><![CDATA[$summary]]></summary>" if $summary;
	$xml .= "<steps><![CDATA[$steps]]></steps>" if $steps;
	$xml .= "<expectedresults><![CDATA[$expected]]></expectedresults>" if $expected;
	$xml .= "</testcase>";
    }
    $xml .= "</testcases>";
    upload_to_testlink($id, $xml);
}

sub clear_old_testcases {

    my $testlink_id = shift;
    say("  Clearing old testcases");
    login_to_testlink();

    my $list_of_ids = get_list_of_ids($testlink_id);

    for my $id (@$list_of_ids) {
	my $req = HTTP::Request->new(POST => 'http://testlink.ca.sophos.com/lib/testcases/tcEdit.php');
	$req->content_type('application/x-www-form-urlencoded');
	$req->content("testcase_id=$id&tcversion_id=0&do_delete=1");

	my $res = $ua->request($req);
	if (!$res->is_success) {
	    die "Unable to delete testcase $id for testsuite $testlink_id: " . $res->status_line;	
	}
	else {
	    warn $res->content if $verbose;
	}
	say("    Deleted test case $id for testsuite $testlink_id");
    }
}

sub get_printable_version {
    my $arg = shift;
    return '' unless $arg;
    my $ref = ref($arg);
    return $arg unless $ref;

    my $printable = '';
    if ($ref eq 'ARRAY') {
	$printable .= get_printable_version($_) . '<br/>' for @$arg; 
	return $printable;
    }
    if ($ref eq 'HASH') {
	my @keys = keys %$arg;
	for my $k (@keys) {
	    $printable .= $k . get_printable_version($arg->{$k}) . "<br/>";
	}
    }

    return $printable;
}

sub get_list_of_ids {
    my $id = shift;
    my $req = HTTP::Request->new(GET =>
	"http://testlinkdb.ca.sophos.com/testcases_from_testsuite_id/$id");
    $req->header('Accept' => 'text/html');

    my $res = $ua->request($req);
    if (!$res->is_success) {
	die "Error getting list of ids: " . $res->status_line;	
    }
    my $content = $res->decoded_content;
    if ($content =~ /error/i or $content =~ /unknown/) {
	return [];
    }
    my @ids = grep { $_ =~ /\d+/ } split ("\n", $content);
    return \@ids; 
}

sub login_to_testlink {
    my $req = HTTP::Request->new(POST => 'http://testlink.ca.sophos.com/index.php');
    $req->content_type('application/x-www-form-urlencoded');
    $req->content("login=$tl_user&password=$tl_pass");

    my $res = $ua->request($req);
    if (!$res->is_success) {
	die "Unable to log in: " . $res->status_line;	
    }
    else {
	warn $res->content if $verbose;
    }
}

sub upload_to_testlink {
    my ($testlink_id, $xml) = @_;
    my $res = $ua->request(
	POST 'http://testlink.ca.sophos.com/lib/testcases/tcImport.php',
	Content_Type => 'form-data',
	Content => [ importType => 'XML',
		     bRecursive => 0,
		     bIntoProject => 0,
		     containerID => $testlink_id,
		     MAX_FILE_SIZE => '',
		     UploadFile => '1',
		     uploadedFile => [ undef, 'cases.xml', Content => $xml]
		     ]
    );
    if (!$res->is_success) {
	die "Unable to POST testcases: " . $res->status_line;	
    }
    else {
	warn $res->content if $verbose;
    }
    say("    Uploaded new testcases successfully");
}

sub say {
    return if $quiet;
    my $message = shift;
    print $message . "\n";
}
sub usage {
    print "Figure it out\n";
    exit(0);
}
